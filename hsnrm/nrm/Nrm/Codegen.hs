{-# LANGUAGE QuasiQuotes #-}

{-|
Module      : Nrm.Codegen
Copyright   : (c) 2019, UChicago Argonne, LLC.
License     : BSD3
Maintainer  : fre@freux.fr
-}
module Nrm.Codegen
  ( main
  , upstreamPubSchema
  , upstreamReqSchema
  , upstreamRepSchema
  , downstreamEventSchema
  , libnrmHeader
  )
where

import Codegen.CHeader
import Codegen.Dhall
import Codegen.Schema (generatePretty)
import Dhall
import qualified Dhall.Core as Dhall
import qualified Dhall.Parser
import qualified Dhall.TypeCheck as Dhall
import NeatInterpolation
import qualified Nrm.Types.Configuration as CI (Cfg)
import qualified Nrm.Types.Manifest as MI (Manifest)
import Nrm.Types.Messaging.DownstreamEvent
import Nrm.Types.Messaging.UpstreamPub
import Nrm.Types.Messaging.UpstreamRep
import Nrm.Types.Messaging.UpstreamReq
import Protolude hiding (Rep)
import System.Directory

-- | The main code generation binary.
main :: IO ()
main = do
  writeFile "../gen/nrm_messaging.h" $ license <> libnrmHeader
  writeFile "../gen/upstreamPub.json" upstreamPubSchema
  writeFile "../gen/upstreamReq.json" upstreamReqSchema
  writeFile "../gen/upstreamRep.json" upstreamRepSchema
  writeFile "../gen/downstreamEvent.json" downstreamEventSchema
  generateDhall

-- | The upstream Request schema.
upstreamReqSchema :: Text
upstreamReqSchema = generatePretty (Proxy :: Proxy Req)

-- | The upstream Reply schema.
upstreamRepSchema :: Text
upstreamRepSchema = generatePretty (Proxy :: Proxy Rep)

-- | The upstream Pub schema.
upstreamPubSchema :: Text
upstreamPubSchema = generatePretty (Proxy :: Proxy Pub)

-- | The downstream Event schema.
downstreamEventSchema :: Text
downstreamEventSchema = generatePretty (Proxy :: Proxy Event)

-- | The libnrm C header.
libnrmHeader :: Text
libnrmHeader = toHeader $ toCHeader (Proxy :: Proxy Event)

-- | A license for C headers.
license :: Text
license =
  [text|
    /*******************************************************************************
     * Copyright 2019 UChicago Argonne, LLC.
     * (c.f. AUTHORS, LICENSE)
     *
     * SPDX-License-Identifier: BSD-3-Clause
    *******************************************************************************/

    /*
     *
     *   THIS FILE WAS AUTOMATICALLY GENERATED BY NRM. DO NOT MODIFY MANUALLY.
     *
    */

  |]

data KnownType
  = Cfg
  | Manifest
  deriving (Bounded, Enum, Eq, Ord, Read, Show)

dhallType :: KnownType -> Dhall.Expr Dhall.Parser.Src a
dhallType t =
  fmap Dhall.absurd
    ( case t of
      Cfg -> Dhall.expected cfg
      Manifest -> Dhall.expected manifest
    )
  where
    cfg :: Dhall.Type CI.Cfg
    cfg = Dhall.auto
    manifest :: Dhall.Type MI.Manifest
    manifest = Dhall.auto

typeFile :: KnownType -> FilePath
typeFile = \case
  Cfg -> "types/Cfg.dhall"
  Manifest -> "types/Manifest.dhall"

generateDhall :: IO ()
generateDhall = do
  putText "Generating types..."
  for_ [minBound .. maxBound] $ \t -> do
    let localDest = typeFile t
        expr = importFile . relativeTo localDest . typeFile <$> dhallType t
        dest = "../resources/" <> localDest
    putText $ "  Writing type for " <> show t <> " to " <> toS dest
    createDirectoryIfMissing True (takeDirectory dest)
    writeOutput dest expr
