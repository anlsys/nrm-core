#!/usr/bin/env python3

###############################################################################
# Copyright 2019 UChicago Argonne, LLC.
# (c.f. AUTHORS, LICENSE)
#
# This file is part of the NRM project.
# For more info, see https://xgitlab.cels.anl.gov/argo/nrm
#
# SPDX-License-Identifier: BSD-3-Clause
###############################################################################

from __future__ import print_function

import argparse
import time
import logging
import os
import math
import tempfile
import subprocess
import uuid
from nrm import messaging

logger = logging.getLogger("perf-wrapper")


class PerfWrapper(object):

    """
    Implements middleware between the Linux perf and
    the NRM downstream interface.
    """

    def __init__(self):
        pass

    def shutdown(self):
        self.downstream_event.send(cmdPause={"cmdID": self.cmdID})

    def performance_report(self, performance):
        # we want to provide the time of the event to nrm, but perf only gives
        # us the timing since the start of the monitoring, so we use a second
        # call to the clock here to get a time since epoch in nanoseconds
        self.downstream_event.send(
            timestamp=time.time_ns(),
            cmdPerformance={"cmdID": self.cmdID, "perf": performance,},
        )

    def setup(self):
        downstream_url = "ipc:///tmp/nrm-downstream-event"
        self.downstream_event = messaging.DownstreamEventClient(downstream_url)
        logger.info("connecting downstream pub")
        self.downstream_event.connect()
        logger.info("downstream pub socket connected to: %s", downstream_url)
        self.cmdID = os.environ.get("NRM_CMDID")
        if self.cmdID is None:
            logger.error("missing cmdID from environment.")
            exit(1)
        self.app_uuid = str(uuid.uuid4())
        logger.info("client uuid: %r", self.app_uuid)

    def main(self):
        parser = argparse.ArgumentParser()
        parser.add_argument(
            "-v", "--verbose", help="verbose logging information", action="store_true"
        )
        parser.add_argument(
            "-f",
            "--frequency",
            help="sampling frequency in Hz",
            type=float,
            default=1.0,
        )
        parser.add_argument(
            "cmd", help="command and arguments", nargs=argparse.REMAINDER
        )
        args = parser.parse_args()

        if args.verbose:
            logger.setLevel(logging.DEBUG)

        logger.info("cmd: %r", args.cmd)

        self.setup()

        # create a named pipe between us and the to-be-launched perf
        # There is no mkstemp for FIFOs but we can securely create a temporary
        # directory and then create a FIFO inside of it.
        tmpdir = tempfile.mkdtemp()
        fifoname = os.path.join(tmpdir, "perf-fifo")
        logger.info("fifoname: %r", fifoname)
        os.mkfifo(fifoname, 0o600)

        perf_tool_path = os.environ.get("PERF", "perf")
        argv = [
            perf_tool_path,
            "stat",
            "-e",
            "instructions",
            "-x",
            ",",
            "-I",
            str(math.floor(1000 / args.frequency)),
            "-o",
            fifoname,
            "--",
        ]
        argv.extend(args.cmd)
        logger.info("argv: %r", argv)

        p = subprocess.Popen(argv, close_fds=True)

        # This blocks until the other end opens as well so we need to invoke
        # it after Popen.
        # FIXME: will deadlock if Popen fails (say, no perf).
        fifo = open(fifoname, "r")

        last_time = 0.0
        # "for line in fifo" idiom didn't work for me here -- Python was
        # buffering the output internally until perf was finished.
        while True:
            line = fifo.readline()
            if not line:
                break

            line = line.strip()
            if len(line) == 0 or line[0] == "#":
                continue
            tokens = line.split(",")

            logger.info("tokens: %r", tokens)

            time = float(tokens[0])
            if tokens[1] == "<not counted>":
                instructions = 0
            else:
                instructions = int(tokens[1])
            ips = int(instructions / (time - last_time))

            logger.info("instructions per second: %r", ips)
            self.performance_report(ips)

            last_time = time

        # The child should be dead by now so this should terminate immediately.
        p.wait()

        self.shutdown()
        fifo.close()
        os.remove(fifoname)
        os.rmdir(tmpdir)


if __name__ == "__main__":
    logging.basicConfig(level=logging.WARNING)
    wrapper = PerfWrapper()
    wrapper.main()
