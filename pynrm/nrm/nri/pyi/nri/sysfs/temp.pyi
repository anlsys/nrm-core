# (generated with --quick)

import collections
import nri.hwloc.topo
import nri.types.definitions
import nri.types.internal.definitions
import typing
from typing import Any, Callable, Dict, Iterable, Mapping, Match, Optional, Sized, SupportsInt, Tuple, Type, TypeVar, Union

CorePaths = Dict[nri.types.definitions._CoreID, nri.types.internal.definitions.Path]
PkgPaths = Dict[nri.types.definitions._PkgID, nri.types.internal.definitions.Path]

ChainMap: Type[typing.ChainMap]
Path: Type[nri.types.internal.definitions.Path]
TemperatureSamples: Type[nri.types.definitions.TemperatureSamples]
Topology: Type[nri.hwloc.topo.Topology]
_CoreID: Type[nri.types.definitions._CoreID]
_PkgID: Type[nri.types.definitions._PkgID]
_Temperature: Type[nri.types.definitions._Temperature]
os: module
re: module
sys: module

_T = TypeVar('_T')
_TPackageCoretempInfo = TypeVar('_TPackageCoretempInfo', bound=PackageCoretempInfo)
a = TypeVar('a')
b = TypeVar('b')

class Coretemp:
    corepaths: Dict[nri.types.definitions._CoreID, nri.types.internal.definitions.Path]
    pkgpaths: Dict[nri.types.definitions._PkgID, nri.types.internal.definitions.Path]
    def __init__(self, hwmondir: str = ...) -> None: ...
    def sample(self) -> nri.types.definitions.TemperatureSamples: ...

class PackageCoretempInfo(tuple):
    __slots__ = ["coretempfns", "dir", "pkgtempfn"]
    __dict__: collections.OrderedDict[str, Union[str, Dict[nri.types.definitions._CoreID, str]]]
    _field_defaults: collections.OrderedDict[str, Union[str, Dict[nri.types.definitions._CoreID, str]]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str, str]
    coretempfns: Dict[nri.types.definitions._CoreID, str]
    dir: str
    pkgtempfn: str
    def __getnewargs__(self) -> Tuple[str, str, Dict[nri.types.definitions._CoreID, str]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TPackageCoretempInfo], dir: str, pkgtempfn: str, coretempfns: Dict[nri.types.definitions._CoreID, str]) -> _TPackageCoretempInfo: ...
    def _asdict(self) -> collections.OrderedDict[str, Union[str, Dict[nri.types.definitions._CoreID, str]]]: ...
    @classmethod
    def _make(cls: Type[_TPackageCoretempInfo], iterable: Iterable[Union[str, Dict[nri.types.definitions._CoreID, str]]], new = ..., len: Callable[[Sized], int] = ...) -> _TPackageCoretempInfo: ...
    def _replace(self: _TPackageCoretempInfo, **kwds: Union[str, Dict[nri.types.definitions._CoreID, str]]) -> _TPackageCoretempInfo: ...

def _build_target_path(d: nri.types.internal.definitions.Path, m: Match) -> nri.types.internal.definitions.Path: ...
def _has_coretemp_in_name_file(folder: nri.types.internal.definitions.Path) -> bool: ...
def _read_all_temperatures(d: Dict[a, nri.types.internal.definitions.Path]) -> Dict[a, nri.types.definitions._Temperature]: ...
@overload
def dataclass(_cls: Type[_T]) -> Type[_T]: ...
@overload
def dataclass(*, init: bool = ..., repr: bool = ..., eq: bool = ..., order: bool = ..., unsafe_hash: bool = ..., frozen: bool = ...) -> Callable[[Type[_T]], Type[_T]]: ...
@overload
def field(*, default: _T, init: bool = ..., repr: bool = ..., hash: bool = ..., compare: bool = ..., metadata: Optional[Mapping[str, Any]] = ...) -> _T: ...
@overload
def field(*, default_factory: Callable[[], _T], init: bool = ..., repr: bool = ..., hash: bool = ..., compare: bool = ..., metadata: Optional[Mapping[str, Any]] = ...) -> _T: ...
@overload
def field(*, init: bool = ..., repr: bool = ..., hash: bool = ..., compare: bool = ..., metadata: Optional[Mapping[str, Any]] = ...) -> Any: ...
def fmapOpt(f: Callable[[a], b], ma: Optional[a]) -> Optional[b]: ...
def mkCoreID(s: Union[str, SupportsInt]) -> nri.types.definitions._CoreID: ...
def mkPkgID(s: Union[str, SupportsInt]) -> nri.types.definitions._PkgID: ...
def mkTemperature(s: Union[str, SupportsInt]) -> nri.types.definitions._Temperature: ...
def readbuf(fn: str) -> str: ...
