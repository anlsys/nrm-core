# (generated with --quick)

import nri.types.definitions
from typing import List, SupportsInt, Type, Union

TemperatureSamples: Type[nri.types.definitions.TemperatureSamples]
_CoreID: Type[nri.types.definitions._CoreID]
_PkgID: Type[nri.types.definitions._PkgID]
_Temperature: Type[nri.types.definitions._Temperature]
_Time: Type[nri.types.definitions._Time]
os: module
sys: module
time: module

class Cpustatvals:
    aperf: int
    cpuid: nri.types.definitions._CoreID
    id_: int
    mperf: int
    pstate: int
    time: nri.types.definitions._Time
    tsc: int
    u64max: int
    def __init__(self, cpuid: nri.types.definitions._CoreID) -> None: ...
    def calc_aperf(self, prev: Cpustatvals) -> float: ...
    def calc_cpufreq(self, prev: Cpustatvals) -> float: ...
    def cpustatfn(self, cpuid: nri.types.definitions._CoreID) -> str: ...
    def diff_u64(self, v1: int, v2: int) -> int: ...
    def parse(self) -> None: ...

class cpufreq_reader:
    cnt: int
    cpus: range
    init: bool
    samples: List[List[Cpustatvals]]
    def __init__(self) -> None: ...
    def aperf(self) -> list: ...
    def cpufreq(self) -> list: ...
    def pstate(self) -> list: ...
    def sample(self) -> None: ...

def mkCoreID(s: Union[str, SupportsInt]) -> nri.types.definitions._CoreID: ...
def mkPkgID(s: Union[str, SupportsInt]) -> nri.types.definitions._PkgID: ...
def mkTime(s: Union[str, SupportsInt]) -> nri.types.definitions._Time: ...
