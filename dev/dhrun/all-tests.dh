  λ(dataDir : Text)
→ λ(daemonCfg : Text)
→ λ(manifestDir : Text)
→ let types = ./dhrun/types.dhall
  
  let values = ./dhrun/values.dhall
  
  let lib = ./lib.dh dataDir manifestDir
  
  let message = "HelloWorld"
  
  let cn = "testContainer"
  
  let basicManifest = manifestDir ++ "libnrm.dhall"
  
  let singularityManifest = manifestDir ++ "singularity.yml"
  
  let argIfTest =
          λ(isTest : Bool)
        → { isTest =
              isTest
          , timeout =
                    if isTest
              
              then  [ +600 ] : Optional Integer
              
              else  [] : Optional Integer
          }
  
  let Powercap = < Cap : Text | NoCap : {} >
  
  in  { run-singularity =
          lib.makeBase
          (   lib.emptyMakeBaseArg "echo" singularityManifest daemonCfg cn
            ⫽ { args =
                  [ message ]
              , singularity =
                  True
              , cmdwants =
                  [] : List Text
              , cmdavoids =
                  [ "Traceback" ]
              , timeout =
                  [ +600 ] : Optional Integer
              }
          )
      , run =
          lib.makeBase
          (   lib.emptyMakeBaseArg "echo" basicManifest daemonCfg cn
            ⫽ { args =
                  [ message ]
              , cmdwants =
                  [] : List Text
              , cmdavoids =
                  [ "Traceback" ]
              , timeout =
                  [ +600 ] : Optional Integer
              }
          )
      , exitcode =
          lib.makeBase
          (   lib.emptyMakeBaseArg "bash" basicManifest daemonCfg cn
            ⫽ { args =
                  ["-c", "exit 1"] : List Text
              , cmdwants =
                  [] : List Text
              , cmdavoids =
                  [ "Traceback" ]
              , timeout =
                  [ +600 ] : Optional Integer
              , runExitcode =
                  [ types.ExitCode.ExitFailure { _1 = +1 } ] : Optional
                                                               types.ExitCode
              }
          )
      , hello =
          lib.makeBase
          (   lib.emptyMakeBaseArg "echo" basicManifest daemonCfg cn
            ⫽ { args =
                  [ message ]
              , cmdwants =
                  [ message ]
              , cmdavoids =
                  [ "Traceback" ]
              , timeout =
                  [ +600 ] : Optional Integer
              }
          )
      , listen =
          lib.makeExtended
          (   lib.emptyMakeBaseArg "sleep" basicManifest daemonCfg cn
            ⫽ { args =
                  [ "1" ]
              , daemonCfg =
                  daemonCfg
              , cmdwants =
                  [] : List Text
              , cmdavoids =
                  [ "Traceback" ]
              , timeout =
                  [ +600 ] : Optional Integer
              }
          )
          [   values.emptyCmd
              { name =
                  "nrm"
              , outfile =
                  "nrmlisten.out"
              , errfile =
                  "nrmlisten.err"
              }
            ⫽ { args = [ "listen-cpd", "-u" ] }
          ]
      , power =
          lib.appTest
          daemonCfg
          (   lib.emptyFilterTestArgs "sleep"
            ⫽ { timeout =
                  [ +600 ] : Optional Integer
              , args =
                  [ "15" ]
              , isTest =
                  True
              }
          )
      , performance =
          lib.appTest
          daemonCfg
          (   lib.emptyFilterTestArgs "sleep"
            ⫽ { timeout =
                  [ +600 ] : Optional Integer
              , args =
                  [ "15" ]
              , isTest =
                  True
              , manifestname =
                  "perfwrap.yml"
              }
          )
      , qmcpack =
            λ(isTest : Bool)
          → λ(powercap : Powercap)
          → lib.extendApp
            ( lib.progressAppTest
              daemonCfg
              (   lib.emptyProgressAppTestArg
                  "mpiexec"
                  [ "-n"
                  , if isTest then "2" else "24"
                  , "qmcpack"
                  , lib.qmcPackDir ++ "/simple-H2O.xml"
                  ]
                ⫽ argIfTest isTest
                ⫽ { cmdavoids =
                      [ "Error", "error", "ERROR" ]
                  , powercap =
                      powercap
                  }
              )
            )
            isTest
      , lammps =
            λ(isTest : Bool)
          → λ(powercap : Powercap)
          → lib.extendApp
            ( lib.progressAppTest
              daemonCfg
              (   lib.emptyProgressAppTestArg
                  "mpiexec"
                  [ "-n"
                  , if isTest then "2" else "24"
                  , "-bind-to"
                  , "core"
                  , "lmp_mpi"
                  , "-i"
                  , lib.lammpsDir ++ "/modified.lj"
                  ]
                ⫽ argIfTest isTest
                ⫽ { cmdavoids =
                      [ "Error", "error", "ERROR" ]
                  , powercap =
                      powercap
                  }
              )
            )
            isTest
      , openmc =
            λ(isTest : Bool)
          → λ(powercap : Powercap)
          → lib.extendApp
            (   lib.progressAppTest
                daemonCfg
                (   lib.emptyProgressAppTestArg
                    "mpiexec"
                    [ "-n", if isTest then "2" else "24", "openmc" ]
                  ⫽ argIfTest isTest
                  ⫽ { passvars =
                        [ "OPENMC_CROSS_SECTIONS" ]
                    , cmdavoids =
                        [ "Error" ]
                    , powercap =
                        powercap
                    }
                )
              ⫽ { pre =
                    [ "cp --no-preserve=mode -r " ++ lib.openmcDir ++ "/* ." ]
                }
            )
            isTest
      , amg =
            λ(isTest : Bool)
          → λ(powercap : Powercap)
          → lib.extendApp
            ( lib.progressAppTest
              daemonCfg
              (   lib.emptyProgressAppTestArg
                  "mpiexec"
                  [ "-n"
                  , if isTest then "2" else "24"
                  , "amg"
                  , "-problem"
                  , "2"
                  , "-n"
                  , "90"
                  , "90"
                  , "90"
                  , "-P"
                  , "2"
                  , if isTest then "1" else "12"
                  , "1"
                  ]
                ⫽ argIfTest isTest
                ⫽ { vars =
                      [ { varname = "OMP_NUM_THREADS", value = "1" } ]
                  , cmdavoids =
                      [ "Error", "error", "ERROR" ]
                  , powercap =
                      powercap
                  }
              )
            )
            isTest
      , stream =
            λ(isTest : Bool)
          → λ(powercap : Powercap)
          → lib.extendApp
            ( lib.progressAppTest
              daemonCfg
              (   lib.emptyProgressAppTestArg "stream_c" ([] : List Text)
                ⫽ argIfTest isTest
                ⫽ { vars =
                      [ { varname =
                            "OMP_NUM_THREADS"
                        , value =
                            if isTest then "2" else "24"
                        }
                      , { varname = "OMP_PLACES", value = "cores" }
                      ]
                  , cmdavoids =
                      [ "Error", "error", "ERROR" ]
                  , powercap =
                      powercap
                  }
              )
            )
            isTest
      }
