stages:
  - source
  - lib
  - afterlib
  - codegen
  - linked

ormolu:
  stage: source
  script:
    - |
      nix-shell -p '(import ./.).fd' '(import ./.).ormolu' --run bash <<< '
      RETURN=0
      cd hsnrm
      for F in $(fd -e hs); do
        ormolu -o -XTypeApplications -m check $F
        if [ $? -ne 0 ]; then
          echo "[!] $F does not pass ormolu haskell format check."  >&2
          RETURN=1
        fi
      done
      if [ $RETURN -ne 0 ]; then
        exit 1
      fi
      '
  tags:
  - integration

hlint:
  stage: source
  script:
    - |
      nix-shell -p '(import ./.).hlint' --run bash <<< '
      cd hsnrm
      hlint .
      '
  tags:
    - integration

black:
  stage: source
  script:
    - |
      nix-shell -p '(import ./.).nrmPythonPackages.black' --run bash <<< '
      black pynrm/bin/* --check
      black pynrm/nrm/*.py --check
      '
  tags:
    - integration

clang-format:
  stage: source
  script:
    - |
      nix-shell -p '(import ./.).fd' '(import ./.).clang-tools' --run bash <<< '
      RETURN=0
      cd libnrm
      for F in $(fd -e c); do
        clang-format < $F | cmp -s $F -
        if [ $? -ne 0 ]; then
          echo "[!] $F does not pass clang-format format check."  >&2
          RETURN=1
        fi
      done
      if [ $RETURN -ne 0 ]; then
        exit 1
      fi'
  tags:
  - integration

nix-build-nrm.so:
  stage: lib
  script: nix-build -A haskellPackages.nrmso --no-build-output
  tags:
  - integration

nix-build-binaries:
  stage: afterlib
  script: nix-build -A haskellPackages.nrmbin --no-build-output
  tags:
  - integration

nix-build-resources:
  stage: codegen
  script: nix-build -A resources --no-build-output
  tags:
  - integration

nix-build-libnrm:
  stage: linked
  script: nix-build -A libnrm --no-build-output
  tags:
  - integration

nix-build-pynrm:
  stage: linked
  script: nix-build -A pynrm --no-build-output
  tags:
  - integration
