variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - source
  - build
  - integration
  - vendoring
  - deploy

ormolu:
  stage: source
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -E '
        let pkgs = (import ./. {});
        in pkgs.mkShell {
          buildInputs = [pkgs.fd pkgs.ormolu];
          shellHook =
            "export LOCALE_ARCHIVE=${pkgs.glibcLocales}/lib/locale/locale-archive \n" +
            "export LANG=en_US.UTF-8";
        }
      ' --run bash <<< '
        RETURN=0
        for F in $(fd -E hsnrm/hbandit -E hsnrm/dhall-haskell -e hs); do
          ormolu -o -XTypeApplications -m check $F
          if [ $? -ne 0 ]; then
            echo "[!] $F does not pass ormolu haskell format check." >&2
            RETURN=1
          fi
        done
        if [ $RETURN -ne 0 ]; then exit 1; fi
      '

shellcheck:
  stage: source
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).fd' -p '(import ./. {}).shellcheck' --run bash <<< '
        RETURN=0
        files=$(fd -E hsnrm/hbandit -E hsnrm/dhall-haskell -e sh)
        for F in $files; do
          shellcheck -s bash $F
          if [ $? -ne 0 ]; then
            echo "[!] $F does not pass shellcheck." >&2
            RETURN=1
          fi
        done
        if [ $RETURN -ne 0 ]; then exit 1; fi
      '

hlint:
  stage: source
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).hlint' --run bash <<< '
        hlint hsnrm/nrm/ --hint=./.hlint.yaml
        hlint hsnrm/bin/ --hint=./.hlint.yaml
      '

black:
  stage: source
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).python37Packages.black' --run bash <<< '
        set -e
        black pynrm/bin/* --check
        black pynrm/nrm/*.py --check
      '

clang-format:
  stage: source
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).fd' '(import ./. {}).clang-tools' --run bash <<< '
        RETURN=0
        for F in $(fd -E hsnrm/hbandit -E hsnrm/dhall-haskell -e c); do
          clang-format < $F | cmp -s $F -
          if [ $? -ne 0 ]; then
            echo "[!] $F does not pass clang-format format check." >&2
            RETURN=1
          fi
        done
        if [ $RETURN -ne 0 ]; then exit 1; fi
      '

dhall-format:
  stage: source
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).fd' '(import ./. {}).haskellPackages.dhall' --run bash <<< '
        RETURN=0
        for F in $(fd -E hsnrm/hbandit -E hsnrm/dhall-haskell -e dhall); do
          dhall format < $F | cmp -s $F -
          if [ $? -ne 0 ]; then
            echo "[!] $F does not pass clang-format format check." >&2
            RETURN=1
          fi
        done
        if [ $RETURN -ne 0 ]; then exit 1; fi
      '

nix:nrm.so:
  stage: build
  tags:
    - kvm
    - nix
  script: nix-build -A haskellPackages.nrmlib --no-build-output

nix:hs-nrmbin:
  stage: build
  tags:
    - kvm
    - nix
  script: nix-build -A haskellPackages.nrmbin --no-build-output

vendoring:copy:
  stage: source
  artifacts:
    paths:
      - tmpdoc
      - tmpresources
  tags:
    - kvm
    - nix
  script:
    - cp -r doc/ tmpdoc
    - cp -r resources/ tmpresources

codegen:
  stage: build
  artifacts:
    paths:
      - resources
  tags:
    - kvm
    - nix
  script:
    - ./shake.sh codegen

doc:
  stage: build
  artifacts:
    paths:
      - doc
  tags:
    - kvm
    - nix
  script:
    - ./shake.sh doc

pyclient:
  stage: build
  artifacts:
    paths:
      - .build
  tags:
    - kvm
    - nix
  script:
    - ./shake.sh pyclient

build:
  stage: build
  artifacts:
    paths:
      - .build
  tags:
    - kvm
    - nix
  script:
    - ./shake.sh build

notebooks:
  stage: integration
  artifacts:
    paths:
      - doc
  tags:
    - kvm
    - nix
  script:
    - ./shake.sh notebooks

vendoring:haddock:
  stage: vendoring
  dependencies:
    - vendoring:copy
    - notebooks
  tags:
    - kvm
    - nix
  script:
    - diff -r doc/nrm.so tmpdoc/nrm.so

vendoring:resources:
  stage: vendoring
  dependencies:
    - vendoring:copy
    - codegen
  tags:
    - kvm
    - nix
  script:
    - diff -r resources tmpresources

nix:resources:
  stage: build
  tags:
    - kvm
    - nix
  script: nix-build -A resources --no-build-output

libnrm:
  stage: build
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell -E '
        let pkgs = (import ./default.nix {});
        in pkgs.libnrm.overrideAttrs (o:{
          preBuild="";
        })
      ' --run bash <<< '
        set -e
        cd libnrm
        ./autogen.sh
        ./configure --enable-pmpi CC=mpicc FC=mpifort CFLAGS=-fopenmp
        make
      '

nix:libnrm:
  stage: build
  tags:
    - kvm
    - nix
  script: nix-build -A libnrm --no-build-output

nix:pynrm:
  stage: build
  tags:
    - kvm
    - nix
  script: nix-build -A pynrm --no-build-output

nix:app-stream:
  stage: build
  tags:
    - kvm
    - nix
  script: nix-build -A stream --no-build-output

nix:app-stream:
  stage: build
  tags:
    - kvm
    - nix
  script: nix-build -A stream --no-build-output

nix:nrmFull:
  stage: build
  tags:
    - integration
  script: nix-build -A nrm --no-build-output

dhrun:hello:
  stage: integration
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).nrm' -p '(import ./. {}).dhrun' --run "dhrun -i" <<< '
        let all = ./dev/dhrun/all-tests.dh
          "../dev/dhrun/assets/"
          "../resources/defaults/Cfg.dhall // { verbose=<Normal|Verbose|Debug>.Debug }"
          "../resources/examples/"
        in all.hello
      '

dhrun:exitcode:
  stage: integration
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).nrm' -p '(import ./. {}).dhrun' --run "dhrun -i" <<< '
        let all = ./dev/dhrun/all-tests.dh
          "../dev/dhrun/assets/"
          "../resources/defaults/Cfg.dhall // { verbose=<Normal|Verbose|Debug>.Debug }"
          "../resources/examples/"
        in all.exitcode
      '

dhrun:listen:
  stage: integration
  tags:
    - kvm
    - nix
  script:
    - |
      nix-shell --pure -p '(import ./. {}).nrm' -p '(import ./. {}).dhrun' --run "dhrun -i" <<< '
        let all = ./dev/dhrun/all-tests.dh
          "../dev/dhrun/assets/"
          "../resources/defaults/Cfg.dhall // { verbose=<Normal|Verbose|Debug>.Debug }"
          "../resources/examples/"
        in all.listen
      '

readthedocs:
  stage: deploy
  when: on_success
  only:
    - master
    - staging
  tags:
    - kvm
    - nix
  script:
    - echo "token=$RTD_TOKEN"
    - nix run nixpkgs.curl -c curl --fail -X POST -d "token=$RTD_TOKEN" readthedocs.org/api/v2/webhook/hnrm/104604/
